# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'ContactsmanagerRnExample' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # ContactsmanagerRn is already included via use_native_modules!
  # Removing duplicate reference
  # pod 'ContactsmanagerRn', :path => '../../'

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )

    # Fix framework embed issues
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
        config.build_settings['ENABLE_BITCODE'] = 'NO'

        # Ensure frameworks are embedded
        if target.name == 'ContactsmanagerRn'
          config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
        end
      end
    end

    # Add a script phase to the main project file instead of trying to modify targets directly
    project_path = installer.sandbox.project_path.dirname + 'ContactsmanagerRnExample.xcodeproj'

    if File.exist?(project_path.to_s)
      project = Xcodeproj::Project.open(project_path)

      main_target = project.targets.find { |t| t.name == 'ContactsmanagerRnExample' }

      if main_target
        # Check if the script phase already exists
        existing_phase = main_target.shell_script_build_phases.find { |phase| phase.name == 'Copy ContactsManagerObjc Framework' }

        # Only add it if it doesn't exist
        unless existing_phase
          phase = main_target.new_shell_script_build_phase('Copy ContactsManagerObjc Framework')
          phase.shell_path = '/bin/bash'
          phase.shell_script = '"${PROJECT_DIR}/ContactsmanagerRnExample/copy_frameworks.sh"'
          phase.run_only_for_deployment_postprocessing = '0'
        end

        project.save
      end
    end
  end
end
