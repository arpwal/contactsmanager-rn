name: Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'minor'
        type: choice
        options:
          - minor
          - patch
          - major
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'package.json'
      - 'tsconfig*.json'
      - 'ios/**'
      - 'android/**'
      - '!node_modules/**'
      - '!.yarn/**'
      - '!example/**'
      - '!.github/**'
      - '!**.md'
      - '!LICENSE'
      - '!.gitignore'
      - '!.editorconfig'
      - '!.gitattributes'
      - '!.nvmrc'
      - '!.watchmanconfig'
      - '!.yarnrc.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for pushing commits and creating tags/releases
      packages: write # Needed for publishing packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # Use the token for authentication

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup Node.js with NPM authentication
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'
          scope: '@contactsmanager'

      - name: Lint & Test
        run: |
          yarn lint
          yarn typecheck
          yarn test

      - name: Build package
        run: yarn prepare

      - name: Set default version bump for push events
        if: github.event_name == 'push'
        run: |
          echo "BUMP_TYPE=patch" >> $GITHUB_ENV

      - name: Configure Git User
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check if version exists
        id: version_check
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Check if the next version would already exist in npm
          BUMP_TYPE="${{ github.event.inputs.version_bump || env.BUMP_TYPE }}"
          if [ "$BUMP_TYPE" = "patch" ]; then
            NEXT_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); v[2]++; console.log(v.join('.'))")
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEXT_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); v[1]++; v[2]=0; console.log(v.join('.'))")
          elif [ "$BUMP_TYPE" = "major" ]; then
            NEXT_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); v[0]++; v[1]=0; v[2]=0; console.log(v.join('.'))")
          fi

          # Check if version exists in npm
          if npm view "@contactsmanager/rn@$NEXT_VERSION" version &>/dev/null; then
            echo "Version $NEXT_VERSION already exists in npm registry"
            echo "VERSION_EXISTS=true" >> $GITHUB_OUTPUT
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version $NEXT_VERSION is available"
            echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create Release and Bump Version
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Use the package.json configuration for release-it but override npm publish
          # This allows us to publish manually in the next step for better error handling

          # Create temporary release-it config file that doesn't publish to npm yet
          echo '{
            "git": {
              "requireBranch": "main",
              "commitMessage": "chore: release v${version}",
              "tagName": "v${version}",
              "push": true
            },
            "github": {
              "release": true
            },
            "npm": {
              "publish": false
            }
          }' > .release-it.json

          # Run release-it with the specified bump type (or use the default for push events)
          BUMP_TYPE="${{ github.event.inputs.version_bump || env.BUMP_TYPE }}"
          yarn release $BUMP_TYPE --ci --no-git.requireUpstream

          # Get new version for later use
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Publish to NPM
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn publish-npm

      - name: Output Result
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        run: echo "Successfully published version ${{ env.NEW_VERSION }} to NPM"

      - name: Version Already Exists
        if: steps.version_check.outputs.VERSION_EXISTS == 'true'
        run: |
          echo "::warning::Version ${{ steps.version_check.outputs.NEXT_VERSION }} already exists in NPM registry. No changes were made."

      - name: Verify Git Status
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        run: |
          git status
          echo "Verifying the changes were committed and pushed by release-it"
          # Check if there are any uncommitted changes
          if [[ -n $(git status -s) ]]; then
            echo "WARNING: There are uncommitted changes after release-it"
            git diff
          else
            echo "All changes were properly committed"
          fi
